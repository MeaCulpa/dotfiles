###############################################################################
# Functions for AIX
# -jyxu- xujinyu@cn.ibm.com

#------------------------------------------------------------------------------
# psf: Displays matches found in ps -ef
#      Excludes self called processes (pid)
#      Calling with no option runs ps -ef
function psf {
    #If no command line items given:
    [ "$1" ] || /bin/ps -ef | /bin/grep -v $$

    #If one or more command line items:
    for CLI do
       /bin/ps -ef | /bin/grep $CLI | /bin/grep -v $$
       shift 1
    done; }

#------------------------------------------------------------------------------
# findbigger: find FILES Bigger than certain blocks on . 
function findbigger { find . -xdev -size +"$1" -ls | sort -r -n -k7; }

#------------------------------------------------------------------------------
# dnswp: Search wikipedia through DNS
function dnswp { dig +short txt "$1".wp.dg.cx; }

#------------------------------------------------------------------------------
# histstat: Command history Stat
function histstat { history | awk '{a[$2]++}END{for(i in a){print a[i] "\t" i}}' | sort -rn | head; }

#------------------------------------------------------------------------------
# WWPN colon and de-colon
function colonfy { print $1 | sed 's/../:&/g' | cut -c2-; }
function decolonfy { print $1 | sed 's/://g'; }
function colon { sed 's/../:&/g' | cut -c2-; }
function decolon { sed 's/://g'; }

#------------------------------------------------------------------------------
# List HBA: List HBA info
function lshba { lsdev -F "name status physloc" | awk '
BEGIN {
    # Header
    print "name\tstatus\t\tphyslot\t\t\t\tWWPN\t\t\tPart #\tCCIN\tColoned WWPN";
}

$1 ~ /^fcs.+/ {
    # Name, Status, Physlot
    printf "%s\t%s\t%s\t",$1,$2,$3;
    cmd = "lscfg -vl "$1;
    while ((cmd | getline) > 0){
        FS=".";
        if (NF==18||NF==6){
            # Part Number, CCIN
            s = s"\t"$NF;
        }
        if (NF==14){
            # WWPN
            printf "%s", $NF;
            # Colonfy
            for (i=1; i<16; i=i+2){
                str = sprintf("%s:%s", str, substr($NF, i, 2))
            };
            printf("%s\t%s\n", s, substr(str, 2));
            s=str=""
        }
    }
    close(cmd);
    FS=" ";
}
'; }


#------------------------------------------------------------------------------
# mdt file sorter for io, with powerpath replacements
# Usage: mdtsort mdt.io > mdt.power
function mdtsort { awk '
NF == 1 {
    # Device head lines.

    # The "default" line.
    if ($0 == "default:") {
        dev = "default";
        power[dev] = "none";
        type[dev] = "default";
        seq[dev] = "0";
        subseq[dev] = "";
        head[dev] = "default:";
        next;
    }

    # Device: disk
    if ( $0 ~ /^rhdisk/ ) {
        # Device name, trim "r" and ":".
        dev = substr($0, 2, length($0)-2);

        # Get powerpath device replacements: rhdisk => rhdiskpower.
        cmd = "powermt display dev="dev" 2>&1"; 
        cmd | getline s; match(s, "Pseudo name="); 
        if (RLENGTH == 12) {
            power[dev] = dev = substr(s,RSTART+RLENGTH);
        }
        else {
            power[dev] = "none";
        }

        close(cmd);
        head[dev] = "r"dev":";
    }
    # Device: other
    else {
        dev = $0;
        head[dev] = $0;
        power[dev] = "none";
    }

    # Extract device type, name, sequence, subsequence ("hdisk XX :").
    match (dev, "[0-9]+")
    type[dev] = substr(dev,1,RSTART-1);
    seq[dev] = substr(dev,RSTART,RLENGTH);
    subseq[dev] = substr(dev,RSTART+RLENGTH);
    
    # Initialize specs
    spec[dev] = "";
}

NF > 1 { 
    # All the parameters, using "|" for a tmp delimiter over newlines.
    spec[dev] = sprintf("%s|%s", spec[dev], $0); 
}

END {
    # Output.
    for (d in head) print type[d], power[d], seq[d], subseq[d], head[d], spec[d], "|";
}
' ${1:-'/usr/lpp/htx/mdt/mdt.all'} |
# Step 2: format output for our needs
# sort by type and seq
sort -k 1,1 -k 3,3n -k 4,4n |
# tailor output
cut -d" " -f5- | 
# CUSTOMIZE HERE: include needed device (i.e.: disks)
egrep '^default|^rhdisk' |
# CUSTOMIZE HERE: exclude unwanted device (i.e.: lunz)
egrep -v 'Z_DISK|LUNZ' |
# get back delimiter
tr '|' '\n'; }

#------------------------------------------------------------------------------
# jy_rmvgs: remove all vg the above function created
function jy_rmvgs {
   print 'Unmounting...'
   mount | awk '/dev\/lv[12]/ {system("umount "$2)}';
   print 'Varying off...'
   lspv | awk '!/rootvg/ && /active/ {system("varyoffvg "$3)}';
   print 'Exporting...'
   lsvg | awk '!/rootvg/ {system("exportvg "$1)}';
   print 'Clearing PVID...'
   lspv | awk '!/active/ && $2 != "none" {system("chdev -l "$1" -a pv=clear")}'
   print '...Done!'; }

#------------------------------------------------------------------------------
# jy_mkvgs: Create jfs and jfs2 VGs in AIX
# Issue: 
#     * No built-in sorting in NAWK and I didn't implement or use external
#       sort. Since we are doing system calls not just outputs.
#       Expect stupid lv serials!
#     * Updated: Reflect new HTX naming convention
#
# To Reverse the effect:
#   mount | awk '/dev\/lv[12]/ {system("umount "$2)}'
#   lspv | awk '!/rootvg/ && /active/ {system("varyoffvg "$3)}'
#   lsvg | awk '!/rootvg/ {system("exportvg "$1)}'
#   lspv | awk '!/active/ && $2 != "none" {system("chdev -l "$1" -a pv=clear")}'
#
function jy_mkvgs { lsdev -Cc disk | awk '
BEGIN {
    # Max PP size, VG capacity, device string length, and PP number in LVs
    MAX_PP_SIZE=8; MAX_VG_CAP=512; MAX_DEV_TYPE=6; LV_PP_NUM=20; hd_seq=1;
}

# Ignore Unavailable device
!/Available/ { next; }

# Ignore LUNZ
/LUNZ/ { next; }

# Ignore EMC Device managed by Powerpath
/EMC/ && !/MPIO/ { next; }

/SAS/ { next; }
$2 != "Available" { next; }

# Ignore those with PVIDs
{
    if (!system("lspv "$1" 2>&1 | grep -q IDENTIFIER > /dev/null"))
    next;
}

# Others
{
    # Get justified name like hdisk001
    dev = justify($1);
    lun[dev] = $1;
    vg[dev] = "hd"hd_seq;
    hd_seq++;
    lunsize[dev] = getlunsize(lun[dev]);
    ppsize[dev] = getppsize(lun[dev]);
}

END {
    print "-------------------- Creating VG and LVs ---------------------"
    for (d in lun){
        # Commands execution, LV names following HTX naming convention
        system("mkvg -s "ppsize[d]" -f -y vg_"d" "lun[d]);
        system("mklv -y lv1"vg[d]" -t jfs vg_"d" "LV_PP_NUM);
        system("mklv -y lv2"vg[d]" -t jfs2 vg_"d" "LV_PP_NUM);
        system("crfs -v jfs -d lv1"vg[d]" -m /lv1"vg[d]" -u testgroup -A no");
        system("crfs -v jfs2 -d lv2"vg[d]" -m /lv2"vg[d]" -u testgroup -A no");
        system("varyonvg vg_"d);
        system("mount /lv1"vg[d]);
        system("mount /lv2"vg[d]);
        system("lsvg -l vg_"d);
        print ""
        print "-------------------- The Magical Seperator ---------------------"
        print ""
    }
}

# Calculate PP Size, default min to MAX_PP_SIZE
function getppsize ( device ) {
    cmd = "bootinfo -P 0 -s "device;
    cmd | getline maxppsize;
    close(cmd);
    if (maxppsize < MAX_PP_SIZE) {
        return maxppsize;
    }
    else {
        return MAX_PP_SIZE;
    }
}

# Calculate lun Size, default max to MAX_VG_CAP
function getlunsize ( device ) {
    cmd = "bootinfo -s "device;
    cmd | getline maxlunsize;
    close(cmd);

    if (maxlunsize < MAX_VG_CAP) {
        return maxlunsize - maxlunsize % 32;
    }
    else {
        return MAX_VG_CAP;
    }
}

# Get justified name like hdisk001
function justify ( str ) {
    match (str, "[0-9]+")
    type = substr(str,1,RSTART-1);
    # Shorten it
    type = substr(type,1,MAX_DEV_TYPE);
    seq = substr(str,RSTART,RLENGTH);
    return sprintf("%s%03d", type, seq);
}
'; }


#------------------------------------------------------------------------------
# calc: in awk
function calc { awk "BEGIN{ print $* }"; }

#------------------------------------------------------------------------------
# List fcscsi device and children
#lsfcs() {lsdev -Cc adapter | awk '/fcs/ {system("lsdev -C | grep "$3"\n")}'; }
function lsfcs { lsdev -Cc adapter | awk '/fcs/ {printf("\n");  system("lsdev -C | grep "$3"")}' | awk '{sub(/^hd/, "\thd")};1'; }

#------------------------------------------------------------------------------
# List disk size
function lsdisksize { lsdev -Cc disk | awk '{"bootinfo -s "$1 | getline size; printf("%-8s%s\n", size,$0); close("bootinfo")}' ; }

#------------------------------------------------------------------------------
# lspath watcher
function mlspath { while true; do clear; echo 'Output of lspath'; echo '-----------------'; lspath | sort +2; sleep ${1:-5}; done; }

#------------------------------------------------------------------------------
# Get WWPN of fcsX
function wwpn { lscfg -vpl $1 | grep Address | sed 's/^.*\.//g'; }

#------------------------------------------------------------------------------
# Coloned WWPN
function cwwpn { lscfg -vpl $1 | grep Address | sed 's/^.*\.//g' | sed -e :it -e 's/\(.*[0-9A-Za-z]\)\([0-9A-Za-z]\{2\}\)/\1:\2/;tit'; }

#------------------------------------------------------------------------------
# Delete defined disk
function deldefdisk { lsdev -Cc disk | awk '/Defined/ {system("rmdev -Rdl "$1)}'; }

#------------------------------------------------------------------------------
# Delete All disk expt. active ones, like rootvg
function delalldisk { lspv | awk '!/active/ {system("rmdev -Rdl "$1)}'; }

#------------------------------------------------------------------------------
# Clear PVID
function pvidclr { lspv | awk '!/active/ {system("chdev -l "$1" -a pv=clear")}'; }

#------------------------------------------------------------------------------
# which hdiskpower is using this hdisk, or vice versa
# Depends on PowerPath version
function disk2power { powermt display dev=$1 2>&1 | sed -n '/^Ps/{s/.*=//;p;}'; }
function power2disk { powermt display dev=$1 | grep 'hdisk[^p]'; }

#------------------------------------------------------------------------------
# Check reserve/release options
function chkreserve { lsdev -Cc disk | awk '$4 ~ /HP|EMC|Hitachi|PowerPath/ { printf($1"\t"); system("lsattr -El "$1" -a reserve_policy") }'; }

#------------------------------------------------------------------------------
# Set all LUN to no_reserve
function chgnoreserve { lsdev -Cc disk | awk '$4 ~ /HP|EMC|Hitachi|PowerPath/ { system("chdev -l "$1" -a reserve_policy=no_reserve") }'; }


###############################################################################
# Personal Functions

#------------------------------------------------------------------------------
# Get Weather forcast from BBC
function ausweather { wget -q -O - http://newsrss.bbc.co.uk/weather/forecast/388/Next3DaysRSS.xml | awk -F'</*title>' '!a[$2]++&&NF!=1 {gsub("&#xB0;","",$2); print $2}'; }
function shweather { wget -q -O - http://newsrss.bbc.co.uk/weather/forecast/1713/Next3DaysRSS.xml | awk -F'</*title>' '!a[$2]++&&NF!=1 {gsub("&#xB0;","",$2); print $2}'; }

#------------------------------------------------------------------------------
## ssh-copy-id to restricted shell
function ssh_copy_id_restrict {
    scp $1:.ssh/authorized_keys2 ~/.ssh/tmp_key_$1
    cat ~/.ssh/id_rsa.pub >> ~/.ssh/tmp_key_$1
    scp ~/.ssh/tmp_key_$1 $1:.ssh/authorized_keys2; }

#------------------------------------------------------------------------------
# displayTZOffset calculates the timezone offset from GMT for the current user
function displayTZOffset {
	awk 'BEGIN{
		"date +\"%H %M\"" | getline localHr localMin;
		"TZ=GMT date +\"%H %M\"" | getline gmtHr gmtMin;
	
		localTime = (localHr * 60) + localMin;
		gmtTime = (gmtHr * 60) + gmtMin;
		timeDiff = localTime - gmtTime;
		if(timeDiff > 720)
			timeDiff = 1440 - timeDiff
		else if(timeDiff < -720)
			timeDiff = -1 * (1440 + timeDiff)
		if(timeDiff < 0)
			minus = true;
		diffHr = int(timeDiff / 60);
		diffMin = timeDiff - (diffHr * 60);
		diffHr = (diffHr > 0)? diffHr : -diffHr;
		diffMin = (diffMin > 0) ? diffMin : -diffMin;
		if(minus){
			printf("%02d:%02d\n", diffHr, diffMin);
		}else{
			printf("-%02d:%02d\n", diffHr, diffMin);
		}
	}' </dev/null; }

#------------------------------------------------------------------------------
# Displays ISO8601 Date
function displayISO8601Date {
	tzOffset=`displayTZOffset`
	echo `date +%Y-%m-%dT%H:%M:%S`$tzOffset; }

#------------------------------------------------------------------------------
# Get_NGP_FSPIP
# Usage: get_ngp_fsp_ip
function get_ngp_fsp_ip { ssh $1 'list -l 2' | awk '/blade/ && NF > 2 { print "ifconfig -T system:"$1 }' | ssh -T $1 |  egrep 'blade|^-i '; }



