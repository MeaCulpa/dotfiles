###############################################################################
# .func, MeaCulpa
#

#------------------------------------------------------------------------------
# SS connection
ss () { ssh -l root $1; }

#------------------------------------------------------------------------------
# Find the file to edit if in $PATH or in the current dir
vip () {
  ITEM=$1
  [ -z "$ITEM" -o -d "$ITEM" ] && {
    echo "usage: vip <filename>"
    return
  }

  FOUND=$(which $ITEM 2>/dev/null)
  [ "$FOUND" ] && /usr/bin/vi $FOUND || echo "Unable to locate \"$ITEM\""
  unset $FOUND; }

#------------------------------------------------------------------------------
fit () {
  [ "$1" ] || return
  find /src /opt /usr /home -name "$1" -ls; }

#------------------------------------------------------------------------------
# psf: Displays matches found in ps -ef
#      Excludes self called processes (pid)
#      Calling with no option runs ps -ef
psf () {
  # If no command line items given:
    [ "$1" ] || /bin/ps -ef | /bin/grep -v $$

  # If one or more command line items:
    for CLI do
       /bin/ps -ef | /bin/grep $CLI | /bin/grep -v $$
       shift 1
    done; }

#------------------------------------------------------------------------------
# dlosspkg: Download oss pkg from AIX Linux Toolbox
dlosspkg () { wget -q -O - http://www-03.ibm.com/systems/power/software/aix/linux/toolbox/alpha.html |  awk 'BEGIN {RS = ">"; FS="\""}; $2 ~ /^ftp.*'"$*"'.*rpm$/ {print $2}' | xargs wget -i; }

#------------------------------------------------------------------------------
# findbigger: find FILES BIgger than certain blocks on . 
findbigger () { find . -xdev -size +"$1" -ls | sort -r -n -k7; }

#------------------------------------------------------------------------------
# dnswp: Search wikipedia through DNS
dnswp () { dig +short txt "$1".wp.dg.cx; }

#------------------------------------------------------------------------------
# histstat: Command history Stat
histstat () { history 100 | awk '{a[$2]++}END{for(i in a){print a[i] "\t" i}}' | sort -rn | head; }

#------------------------------------------------------------------------------
# gtranslate: Google Translate, example:
# gtranslate hello en es
#
# language codes: http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
gtranslate () { curl -s "http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&q=$1&langpair=$2|${3:-en}" | sed 's/.*"translatedText":"\([^"]*\)".*}/\1\n/'; }

#------------------------------------------------------------------------------
# chkgmail: Google Mail Atom parser
# Usage: chkgmail USER PASS
# 
chkgmail () { curl -u $1:$2 --silent "https://mail.google.com/mail/feed/atom" |awk -F '</?title>|</?summary>|</?name>' 'NF<=1 {next;} /title/ {print "\n["substr($2,1,80)"]"};/summary/{print "\033[32m"$2"\033[39m";};/name/{print "\t--"$2}'; }

#------------------------------------------------------------------------------
# immcurl: post to imm.io
# Usage: immcurl imagefile.name
# 
immcurl () { curl -s --form image=@$1 --form submit=OK http://imm.io/store/ | awk -F '\"[:,]\"' '{print $4}'; }

#------------------------------------------------------------------------------
# mlnetcli: run a mlnet cmd
# Usage: mlnetcli COMMAND
# 
mlnetcli () { echo -e 'auth admin XXXXXXXXX\n$1\nq' | nc localhost 4000; }

#------------------------------------------------------------------------------
# du dir size stat
# alt: find -maxdepth 1 -type d -exec du -sh {} \;
# 
sdu () { du -ch --max-depth=1 "${@-.}"|sort -h; }

#------------------------------------------------------------------------------
# dvd chapter play
mdvd () { mplayer -dvd-device /dev/sr0  dvd://$1-$2; }

#------------------------------------------------------------------------------
# installed gentoo pkg percentage
ipkg () { echo $((`eix --only-names -I | wc -l` * 100 / `eix --only-names | wc -l`))%; }

#------------------------------------------------------------------------------
# installed gentoo pkg percentage
kacha_upaste () { scrot /tmp/scrop_tmp.png -bcsd 3 -e "echo | upaste -image \$f | xsel -bi; rm \$f"; }

#------------------------------------------------------------------------------
# BBC Radio
bbcradio () { local s;echo "Select a station:";select s in 1 1x 2 3 4 5 6 7 "Asian Network an" "Nations & Local lcl";do break;done;s=($s);mplayer -playlist "http://www.bbc.co.uk/radio/listen/live/r"${s[@]: -1}".asx"; }


#------------------------------------------------------------------------------
# Blip.fm radio
#------------------------------------------------------------------------------

# WWPN colonfy
colon () { sed 's/../:&/g' <<< $1 | cut -c2-; }
colon () { sed 's/../:\0/2g'; }
#colon () { sed -e :it -e 's/\(.*[0-9A-Za-z]\)\([0-9A-Za-z]\{2\}\)/\1:\2/;tit'; }
decolon () { sed 's/://g' <<< $1; }
blipfm () { while true; do mplayer `curl -s http://blip.fm/all | sed -e 's#"#\n#g' | grep mp3$ | xargs`; done; }

#------------------------------------------------------------------------------
# commandlinefu
# alt: for x in `jot - 0 2400 25`; do curl "http://www.commandlinefu.com/commands/browse/sort-by-votes/plaintext/$x"  ; done > commandlinefu.txt
cmdfu () { curl -O http://www.commandlinefu.com/commands/browse/sort-by-votes/plaintext/[0-2400:25]; }

#------------------------------------------------------------------------------
# daily proxy
dailyproxy () { curl -s -f -S http://www.unblockwebsitestoday.com/proxy.htm | egrep -o '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'; }

#------------------------------------------------------------------------------
# make link from url
mklink () { echo $1 | sed -e h -e 's@/@\\@g' -e G -e 's@\([^\n]*\)\n\(.*\)@<a href="http://\2">\1</a>@'; }

#------------------------------------------------------------------------------
# Get Weather forcast from BBC
ausweather () { curl -s http://newsrss.bbc.co.uk/weather/forecast/388/Next3DaysRSS.xml | awk -F'</*title>' '!a[$2]++&&NF!=1 {gsub("&#xB0;","",$2); print $2}'; }
shweather () { curl -s http://newsrss.bbc.co.uk/weather/forecast/1713/Next3DaysRSS.xml | awk -F'</*title>' '!a[$2]++&&NF!=1 {gsub("&#xB0;","",$2); print $2}'; }

#------------------------------------------------------------------------------
# ANSI color zebra output
#zebra() { cat $1 | awk '{if (NR%2 == 1)printf("\033[30m\033[47m%s\033[0m\n", $0); else print}'; }
zebra () { cat $1 | awk 'NR%2 == 1 {printf("\033[30m\033[47m%s\033[0m\n", $0); next}; 1'; }

#------------------------------------------------------------------------------
# ANSI color zebra output, longhorn!
longhorn () { cat $1 | awk '{if (NR%2 == 1)printf("\033[1;37m\033[43m%s\033[0m\n", $0); else printf("\033[33m\033[47m%s\033[0m\n", $0);}'; }

#------------------------------------------------------------------------------
# tail -f with timestamp
ttailf () { tail -f $1 | awk '{sub(/^/,strftime("%F %T%z\t"));print}'; }

#------------------------------------------------------------------------------
# awk analizer, try some [-F]s!
awkanalize () { cat $1 | awk -F'a href=\"|\"' '{for (i=1; i<NF; i++){print "Row: "NR", COL: "NF"\t"$i}}'; }

#------------------------------------------------------------------------------
# cfgmgr
cfgmgr () { for i in /sys/class/fc_host/host*; do echo "Rescanning devices attached to ${i##*/}" && echo "- - -" > /sys/class/scsi_host/${i##*/}/scan; done; }

#------------------------------------------------------------------------------
# dmesglog
dmesglog () { dmesg > `print -n dmesg_ && date +'%Y%m%d%H%M%S'`; }

#------------------------------------------------------------------------------
# world clock, usage: worldclock austin
worldclock () { ls -R1 /usr/share/zoneinfo | awk -v i=${1:='Shanghai'} 'tolower($1) ~ tolower(i) {system("TZ="$1" date"); exit}'; }

#------------------------------------------------------------------------------
# isgd
isgd () { curl 'http://is.gd/create.php?format=simple' --data-urlencode url="$1" ; printf "\n"; }

#------------------------------------------------------------------------------
# easy ssl encoding/decoding with blowfish
sslenc () { openssl bf -e -a -salt; }
ssldec () { openssl bf -d -a -salt; }

#------------------------------------------------------------------------------
# get ascii code of a character
asciilookup () { man ascii | awk -v char=$1 '
    BEGIN { print "Char\tOct\tDec\tHex"}
    /NOTES/ {exit}
    {
        if ($4 == char) {
            printf("%s\t%s\t%s\t%s\n", $4, $1, $2, $3)
        }
        
        if ($NF == char) {
            printf("%s\t%s\t%s\t%s\n", $NF, $(NF-3), $(NF-2), $(NF-3))
        }
    }
' ; }

#------------------------------------------------------------------------------
# ssh-copy-id to restricted shell
ssh_copy_id_restrict () {
    scp $1:.ssh/authorized_keys2 ~/.ssh/tmp_key_$1
    cat ~/.ssh/id_rsa.pub >> ~/.ssh/tmp_key_$1
    scp ~/.ssh/tmp_key_$1 $1:.ssh/authorized_keys2; }

#------------------------------------------------------------------------------
# Playing with figlet
figshowall () { figlist | awk -v char=$1 'NF == 1 {print $1":"; system("figlet -f "$1" "char);print "---"}'; }

##------------------------------------------------------------------------------
## xunlei Download
#xunlei_d () { wget --load-cookies=xunlei.cookie -c -t 0 --timeout=60 --waitretry=60 $1 -O $2; }
xunlei_d () { aria2c -c --load-cookies=xunlei.cookie --max-connection-per-server=10 --split=10 $1 -o $2; }

#------------------------------------------------------------------------------
# rdp to windows, rdp_win ip user pass
rdp_win () { rdesktop -g 1280x800 -a 16 -u $2 -p $3 $1; }

#------------------------------------------------------------------------------
# htdocs to bejgsa
htdocs2gsa () { rsync -avz --delete ~/htdocs jyxu@bejgsa.ibm.com:/bejgsa/.home/h1/jyxu/web/public/; }

#------------------------------------------------------------------------------
# poaste to mozillapaste
mozpaste () {
    PASTE_DATA=""
    while read input; do 
        if [[ $PASTE_DATA == "" ]] ; then
            PASTE_DATA=$input
        else
            PASTE_DATA="$PASTE_DATA 
$input"
        fi
    done

    curl -i --data-urlencode "code2=$PASTE_DATA" -d "parent_pid=&format=text&poster=MeaCulpa&expiry=d&paste=Send" http://pastebin.mozilla.org/ -s \
        | egrep -o 'http.*' | tee >(xsel); }

#------------------------------------------------------------------------------
# acdsee 
acdsee () { feh -g 1024x768 -d -S filename $1; }

#------------------------------------------------------------------------------
# wget whole dir
wgetdir () { wget -H -r --level=1 -k -p $1; }

#------------------------------------------------------------------------------
# kacha and paste to immio. Default to 70% quality
kacha_immio () { scrot /tmp/scrot_tmp.png -d 3 -q 75 -m && curl -s --form image=@/tmp/scrot_tmp.png --form submit=OK http://imm.io/store/  | awk -F '\"[:,]\"' '{print $4}' | tee >(xsel) && rm /tmp/scrot_tmp.png; }

#------------------------------------------------------------------------------
# Simple RSS Fead Reader, a template
rssawk () { curl -s "$1" | awk '
BEGIN { FS = "</?title>?|</?description>?|</?link>?";
        RS = ">\n";
}

NF < 2 { next;}

/title/ { print "\n[\033[32m"substr($2,1,85)"\033[39m]";}

/link/ { print "\033[36m"$2"\033[39m";}

/description/ {
    gsub ("<!\\[CDATA\\[|\\]\\]>", "", $2);
    print $2 | "fmt -w 85 -";
    close("fmt -w 85 -");
}
'; }


#------------------------------------------------------------------------------
# Hacker News RSS Fead Reader
rssHackerNews () { curl -s http://news.ycombinator.com/rss | awk '
function html_esc ( str ) { 

    # General Escaping Code -> Symbol
    for (i=33; i<383; i++) {
        code = sprintf("&#%s;", i);
        symbol = sprintf("%c", i);
        trans[code] = symbol;
    }

    # Trademark, with no entity name
    trans["&#8482;"] = sprintf("%c", 8482); # ™
    
    # Euro, with no code
    trans["&euro;"] = "€"; # €
    
    # Common symbol with additional entity name
    trans["&quot;"] = trans["&#34;"]; # "
    trans["&amp;"] = trans["&#38;"]; # &
    trans["&lt;"] = trans["&#60;"]; # <
    trans["&gt;"] = trans["&#62;"]; # >
    
    # Symbols with additional entity name
    trans["&nbsp;"] = trans["&#160;"] # None-breaking Space
    trans["&iexcl;"] = trans["&#161;"] # ¡
    trans["&cent;"] = trans["&#162;"] # ¢
    trans["&pound;"] = trans["&#163;"] # £
    trans["&curren;"] = trans["&#164;"] # ¤
    trans["&yen;"] = trans["&#165;"] # ¥
    trans["&brvbar;"] = trans["&#166;"] # ¦
    trans["&sect;"] = trans["&#167;"] # §
    trans["&uml;"] = trans["&#168;"] # ¨
    trans["&copy;"] = trans["&#169;"] # ©
    trans["&ordf;"] = trans["&#170;"] # ª
    #trans[""] = trans["&#171;"] # No entity name for: «
    trans["&not;"] = trans["&#172;"] # ¬
    trans["&shy;"] = trans["&#173;"] # ­
    trans["&reg;"] = trans["&#174;"] # ®
    trans["&macr;"] = trans["&#175;"] # ¯
    trans["&deg;"] = trans["&#176;"] # °
    trans["&plusmn;"] = trans["&#177;"] # ±
    trans["&sup2;"] = trans["&#178;"] # ²
    trans["&sup3;"] = trans["&#179;"] # ³
    trans["&acute;"] = trans["&#180;"] # ´
    trans["&micro;"] = trans["&#181;"] # µ
    trans["&para;"] = trans["&#182;"] # ¶
    trans["&middot;"] = trans["&#183;"] # ·
    trans["&cedil;"] = trans["&#184;"] # ¸
    trans["&sup1;"] = trans["&#185;"] # ¹
    trans["&ordm;"] = trans["&#186;"] # º
    trans["&raquo;"] = trans["&#187;"] # »
    trans["&frac14;"] = trans["&#188;"] # ¼
    trans["&frac12;"] = trans["&#189;"] # ½
    trans["&frac34;"] = trans["&#190;"] # ¾
    trans["&iquest;"] = trans["&#191;"] # ¿
    trans["&Agrave;"] = trans["&#192;"] # À
    trans["&Aacute;"] = trans["&#193;"] # Á
    trans["&Acirc;"] = trans["&#194;"] # Â
    trans["&Atilde;"] = trans["&#195;"] # Ã
    trans["&Auml;"] = trans["&#196;"] # Ä
    trans["&Aring;"] = trans["&#197"] # Å
    trans["&AElig;"] = trans["&#198;"] # Æ
    trans["&Ccedil;"] = trans["&#199;"] # Ç
    trans["&Egrave;"] = trans["&#200;"] # È
    trans["&Eacute;"] = trans["&#201;"] # É
    trans["&Ecirc;"] = trans["&#202;"] # Ê
    trans["&Euml;"] = trans["&#203;"] # Ë
    trans["&Igrave;"] = trans["&#204;"] # Ì
    trans["&Iacute;"] = trans["&#205;"] # Í
    trans["&Icirc;"] = trans["&#206;"] # Î
    trans["&Iuml;"] = trans["&#207;"] # Ï
    trans["&ETH;"] = trans["&#208;"] # Ð
    trans["&Ntilde;"] = trans["&#209;"] # Ñ
    trans["&Ograve;"] = trans["&#210;"] # Ò
    trans["&Oacute;"] = trans["&#211;"] # Ó
    trans["&Ocirc;"] = trans["&#212;"] # Ô
    trans["&Otilde;"] = trans["&#213;"] # Õ
    trans["&Ouml;"] = trans["&#214;"] # Ö
    trans["&times;"] = trans["&#215;"] # ×
    trans["&Oslash;"] = trans["&#216;"] # Ø
    trans["&Ugrave;"] = trans["&#217;"] # Ù
    trans["&Uacute;"] = trans["&#218;"] # Ú
    trans["&Ucirc;"] = trans["&#219;"] # Û
    trans["&Uuml;"] = trans["&#220;"] # Ü
    trans["&Yacute;"] = trans["&#221;"] # Ý
    trans["&THORN;"] = trans["&#222;"] # Þ
    trans["&szlig;"] = trans["&#223;"] # ß
    trans["&agrave;"] = trans["&#224;"] # à
    trans["&aacute;"] = trans["&#225;"] # á
    trans["&acirc;"] = trans["&#226;"] # â
    trans["&atilde;"] = trans["&#227;"] # ã
    trans["&auml;"] = trans["&#228;"] # ä
    trans["&aring;"] = trans["&#229;"] # å
    trans["&aelig;"] = trans["&#230;"] # æ
    trans["&ccedil;"] = trans["&#231;"] # ç
    trans["&egrave;"] = trans["&#232;"] # è
    trans["&eacute;"] = trans["&#233;"] # é
    trans["&ecirc;"] = trans["&#234;"] # ê
    trans["&euml;"] = trans["&#235;"] # ë
    trans["&igrave;"] = trans["&#236;"] # ì
    trans["&iacute;"] = trans["&#237"] # í
    trans["&icirc;"] = trans["&#238;"] # î
    trans["&iuml;"] = trans["&#239;"] # ï
    trans["&eth;"] = trans["&#240;"] # ð
    trans["&ntilde;"] = trans["&#241;"] # ñ
    trans["&ograve;"] = trans["&#242;"] # ò
    trans["&oacute;"] = trans["&#243;"] # ó
    trans["&ocirc;"] = trans["&#244;"] # ô
    trans["&otilde;"] = trans["&#245;"] # õ
    trans["&ouml;"] = trans["&#246;"] # ö
    trans["&divide;"] = trans["&#247;"] # ÷
    trans["&oslash;"] = trans["&#248;"] # ø
    trans["&ugrave;"] = trans["&#249;"] # ù
    trans["&uacute;"] = trans["&#250;"] # ú
    trans["&ucirc;"] = trans["&#251;"] # û
    trans["&uuml;"] = trans["&#252;"] # ü
    trans["&yacute;"] = trans["&#253;"] # ý
    trans["&thorn;"] = trans["&#254;"] # þ

    for (i in trans) { 
        gsub(i, trans[i], str) 
    }

    return str; 
} 
  
BEGIN { 
    FS = "</?title>?|</?description>?|</?link>?"; 
    RS = ">"; }  

/title/ {
    getline; 
    printf "\n[\033[32m"substr(html_esc($1),1,85)"\033[39m]"; 
}

/link/ { 
    print "\033[36m"$1"\033[39m"; 
}
'; }

#-----------------------------------------------------------------------------
# dooloo.info parser, WIP
dooloo () { curl -s dooloo.info |  awk '

function html_esc ( str ) { 
    
    # General Escaping Code -> Symbol
    for (i=33; i<383; i++) {
        code = sprintf("&#%s;", i);
        symbol = sprintf("%c", i);
        trans[code] = symbol;
    }
    
    # Trademark, with no entity name
    trans["&#8482;"] = sprintf("%c", 8482); # ™
    
    # Euro, with no code
    trans["&euro;"] = "€"; # €
    
    # Common symbol with additional entity name
    trans["&quot;"] = trans["&#34;"]; # "
    trans["&amp;"] = trans["&#38;"]; # &
    trans["&lt;"] = trans["&#60;"]; # <
    trans["&gt;"] = trans["&#62;"]; # >
    
    # Symbols with additional entity name
    trans["&nbsp;"] = trans["&#160;"] # None-breaking Space
    trans["&iexcl;"] = trans["&#161;"] # ¡
    trans["&cent;"] = trans["&#162;"] # ¢
    trans["&pound;"] = trans["&#163;"] # £
    trans["&curren;"] = trans["&#164;"] # ¤
    trans["&yen;"] = trans["&#165;"] # ¥
    trans["&brvbar;"] = trans["&#166;"] # ¦
    trans["&sect;"] = trans["&#167;"] # §
    trans["&uml;"] = trans["&#168;"] # ¨
    trans["&copy;"] = trans["&#169;"] # ©
    trans["&ordf;"] = trans["&#170;"] # ª
    #trans[""] = trans["&#171;"] # No entity name for: «
    trans["&not;"] = trans["&#172;"] # ¬
    trans["&shy;"] = trans["&#173;"] # ­
    trans["&reg;"] = trans["&#174;"] # ®
    trans["&macr;"] = trans["&#175;"] # ¯
    trans["&deg;"] = trans["&#176;"] # °
    trans["&plusmn;"] = trans["&#177;"] # ±
    trans["&sup2;"] = trans["&#178;"] # ²
    trans["&sup3;"] = trans["&#179;"] # ³
    trans["&acute;"] = trans["&#180;"] # ´
    trans["&micro;"] = trans["&#181;"] # µ
    trans["&para;"] = trans["&#182;"] # ¶
    trans["&middot;"] = trans["&#183;"] # ·
    trans["&cedil;"] = trans["&#184;"] # ¸
    trans["&sup1;"] = trans["&#185;"] # ¹
    trans["&ordm;"] = trans["&#186;"] # º
    trans["&raquo;"] = trans["&#187;"] # »
    trans["&frac14;"] = trans["&#188;"] # ¼
    trans["&frac12;"] = trans["&#189;"] # ½
    trans["&frac34;"] = trans["&#190;"] # ¾
    trans["&iquest;"] = trans["&#191;"] # ¿
    trans["&Agrave;"] = trans["&#192;"] # À
    trans["&Aacute;"] = trans["&#193;"] # Á
    trans["&Acirc;"] = trans["&#194;"] # Â
    trans["&Atilde;"] = trans["&#195;"] # Ã
    trans["&Auml;"] = trans["&#196;"] # Ä
    trans["&Aring;"] = trans["&#197"] # Å
    trans["&AElig;"] = trans["&#198;"] # Æ
    trans["&Ccedil;"] = trans["&#199;"] # Ç
    trans["&Egrave;"] = trans["&#200;"] # È
    trans["&Eacute;"] = trans["&#201;"] # É
    trans["&Ecirc;"] = trans["&#202;"] # Ê
    trans["&Euml;"] = trans["&#203;"] # Ë
    trans["&Igrave;"] = trans["&#204;"] # Ì
    trans["&Iacute;"] = trans["&#205;"] # Í
    trans["&Icirc;"] = trans["&#206;"] # Î
    trans["&Iuml;"] = trans["&#207;"] # Ï
    trans["&ETH;"] = trans["&#208;"] # Ð
    trans["&Ntilde;"] = trans["&#209;"] # Ñ
    trans["&Ograve;"] = trans["&#210;"] # Ò
    trans["&Oacute;"] = trans["&#211;"] # Ó
    trans["&Ocirc;"] = trans["&#212;"] # Ô
    trans["&Otilde;"] = trans["&#213;"] # Õ
    trans["&Ouml;"] = trans["&#214;"] # Ö
    trans["&times;"] = trans["&#215;"] # ×
    trans["&Oslash;"] = trans["&#216;"] # Ø
    trans["&Ugrave;"] = trans["&#217;"] # Ù
    trans["&Uacute;"] = trans["&#218;"] # Ú
    trans["&Ucirc;"] = trans["&#219;"] # Û
    trans["&Uuml;"] = trans["&#220;"] # Ü
    trans["&Yacute;"] = trans["&#221;"] # Ý
    trans["&THORN;"] = trans["&#222;"] # Þ
    trans["&szlig;"] = trans["&#223;"] # ß
    trans["&agrave;"] = trans["&#224;"] # à
    trans["&aacute;"] = trans["&#225;"] # á
    trans["&acirc;"] = trans["&#226;"] # â
    trans["&atilde;"] = trans["&#227;"] # ã
    trans["&auml;"] = trans["&#228;"] # ä
    trans["&aring;"] = trans["&#229;"] # å
    trans["&aelig;"] = trans["&#230;"] # æ
    trans["&ccedil;"] = trans["&#231;"] # ç
    trans["&egrave;"] = trans["&#232;"] # è
    trans["&eacute;"] = trans["&#233;"] # é
    trans["&ecirc;"] = trans["&#234;"] # ê
    trans["&euml;"] = trans["&#235;"] # ë
    trans["&igrave;"] = trans["&#236;"] # ì
    trans["&iacute;"] = trans["&#237"] # í
    trans["&icirc;"] = trans["&#238;"] # î
    trans["&iuml;"] = trans["&#239;"] # ï
    trans["&eth;"] = trans["&#240;"] # ð
    trans["&ntilde;"] = trans["&#241;"] # ñ
    trans["&ograve;"] = trans["&#242;"] # ò
    trans["&oacute;"] = trans["&#243;"] # ó
    trans["&ocirc;"] = trans["&#244;"] # ô
    trans["&otilde;"] = trans["&#245;"] # õ
    trans["&ouml;"] = trans["&#246;"] # ö
    trans["&divide;"] = trans["&#247;"] # ÷
    trans["&oslash;"] = trans["&#248;"] # ø
    trans["&ugrave;"] = trans["&#249;"] # ù
    trans["&uacute;"] = trans["&#250;"] # ú
    trans["&ucirc;"] = trans["&#251;"] # û
    trans["&uuml;"] = trans["&#252;"] # ü
    trans["&yacute;"] = trans["&#253;"] # ý
    trans["&thorn;"] = trans["&#254;"] # þ

    for (i in trans) { 
        gsub(i, trans[i], str) 
    }

    return str; 
} 

BEGIN { RS=">\n"; FS="[\"><]|=\x27"; print "" } 
/title=/ {
    sub("^/", "http://dooloo.info/", $3); 
    print "[\033[32m"substr(html_esc($7),1,85)"\033[39m]\n\033[36m"$3"\033[39m\n"
}
'; }

#-----------------------------------------------------------------------------
# catall
# Cat files with line numbers
catall () { for f in $*; do cat $f | nl -s " "$f": "; done; }

#-----------------------------------------------------------------------------
# console clock
# A clock in your up-right console
cclock () { while true; do echo -ne "\e[s\e[0;$((COLUMNS-27))H$(date)\e[u"; sleep 1; done &; }


